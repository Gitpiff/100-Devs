A promise is an object that represents the eventual completion or failure of an async operation and its value, simply pu it is an object that MAY have a value in the future.

A promise can have three possible states;
1.- pending; initial state, neither fulfilled nor rejected.
    -.then(value) => is a promise object method that runs after the promise "resolves" and whatever value the promise object has gets passes as an argument.
2.- fulfilled; meaning that the operation was completed successfully.
3.- rejected; meaning that the operation failed.
    -.catch() => is a promise object method that runs after the promise "rejects".

async makes the function behave like an asynchronous function even if it is synchronous
Example, this code will behave asynchronous even when it has timers

// function houseOne(){
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve('Paper delivered to house 1')
//         }, 1000)
//     })
// }
// function houseTwo(){
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve('Paper delivered to house 2')
//         }, 5000)
//     })
// }
// function houseThree(){
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve('Paper delivered to house 3')
//         }, 2000)
//     })
// }

// async function getPaid(){
//     const houseOneWait = await houseOne()
//     const houseTwoWait = await houseTwo()
//     const houseThreeWait = await houseThree()
//     console.log(houseOneWait)
//     console.log(houseTwoWait)
//     console.log(houseThreeWait)
// }
